#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define SYM  1
#define NUM  2
#define NAV  3
#define DEV  4
#define MULT KP_MULTIPLY
#define MEH LG(LA(LSHIFT))

/ {
    behaviors {
        hr: home-row-hold-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            flavor = "balanced";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <280>; // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            // hold-trigger-key-positions = <KEYS_R THUMBS>;
            // hold-trigger-on-release; // delay positional check until key-release
        };
        ltq: layer-tap-hold-prefer {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_HOLD_PREFERRED";
            flavor = "hold-preferred";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            bindings = <&mo>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        paren_l {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <20>;
        };

        brace_l {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <13 14>;
            timeout-ms = <20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        bracket_l {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <24 25>;
            timeout-ms = <20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        paren_r {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <20>;
        };

        brace_r {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <16 15>;
            timeout-ms = <20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        bracket_r {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <26 27>;
            timeout-ms = <20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <17 18>;
            timeout-ms = <20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <18 19>;
            timeout-ms = <20>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        excl {
            bindings = <&kp EXCL>;
            key-positions = <0 1>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <20>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <1 2>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <20>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <2 3>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <20>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 4>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <20>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <5 6>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <20>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <6 7>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <20>;
        };

        ampersant {
            bindings = <&kp AMPS>;
            key-positions = <7 8>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <20>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <8 9>;
            require-prior-idle-ms = <150>;
            layers = <0>;
            timeout-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
       &kp Q        &kp W       &kp E                   &kp R        &kp T    &kp Y      &kp U        &kp I       &kp O       &kp P
       &hr LCTRL A  &hr LALT S  &hr LGUI D              &hr LSHFT F  &kp G    &kp H      &hr RSHFT J  &hr RGUI K  &hr RALT L  &hr RCTRL SQT
&none  &kp Z        &kp X       &kp C                   &kp V        &kp B    &kp N      &kp M        &kp COMMA   &kp DOT     &kp FSLH       &kp RET
                                &mt LA(LG(LSHIFT)) TAB  &lt 2 SPACE  &mo 3    &kp LSHFT  &ltq 1 ESC   &kp BSPC
            >;
        };

        sym_layer {
            label = "SYM";
            bindings = <
       &kp EXCL   &kp AT     &kp HASH   &kp DLLR  &kp PRCNT         &kp CARET        &kp AMPS   &kp ASTERISK  &none     &none
       &kp TILDE  &kp MINUS  &kp EQUAL  &kp LPAR  &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RPAR   &kp SEMI      &kp PIPE  &kp DQT
&none  &kp GRAVE  &kp UNDER  &kp PLUS   &kp SEMI  &kp LBKT          &kp RBKT         &kp COLON  &kp COLON     &none     &kp BSLH  &none
                             &trans     &mo 4     &trans            &trans           &none      &trans
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
       &none      &none      &none      &none      &none     &none     &none     &none    &none      &none
       &kp LCTRL  &kp LALT   &kp LGUI   &kp LSHFT  &none     &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &none
&none  &none      &kp LG(X)  &kp LG(C)  &kp LG(V)  &none     &none     &none     &none    &none      &none  &none
                             &trans     &none      &trans    &trans    &mo 4     &kp DEL
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
       &none      &none     &none     &none      &none                   &kp PLUS               &kp N7  &kp N8  &kp N9  &kp CARET
       &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp N4  &kp N5  &kp N6  &kp ASTERISK
&none  &none      &none     &none     &none      &none                   &kp DOT                &kp N1  &kp N2  &kp N3  &kp SLASH     &trans
                            &none     &trans     &trans                  &trans                 &kp N0  &trans
            >;
        };

        device_layer {
            label = "DEV";
            bindings = <
       &kp C_AL_LOCK  &out OUT_TOG  &none                     &none  &none     &none   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none  &none
       &none          &none         &kp LS(LC(LG(NUMBER_4)))  &none  &none     &none   &kp K_VOL_DN          &kp K_VOLUME_UP       &none  &none
&none  &none          &none         &none                     &none  &none     &none   &kp K_MUTE            &none                 &none  &none  &none
                                    &trans                    &none  &trans    &trans  &none                 &trans
            >;
        };
    };
};
